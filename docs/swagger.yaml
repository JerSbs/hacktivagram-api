basePath: /
definitions:
  dto.CommentItem:
    properties:
      content:
        type: string
      id:
        type: integer
      name:
        type: string
      user_id:
        type: integer
    type: object
  dto.CreatePostRequest:
    properties:
      content:
        type: string
      image_url:
        type: string
    required:
    - image_url
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: boolean
      message:
        type: string
    type: object
  dto.PostDetailResponse:
    properties:
      comments:
        items:
          $ref: '#/definitions/dto.CommentItem'
        type: array
      content:
        type: string
      id:
        type: integer
      image_url:
        type: string
      user_id:
        type: integer
      user_name:
        type: string
    type: object
  dto.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.UserRegisterRequest:
    properties:
      address:
        type: string
      age:
        type: integer
      email:
        type: string
      full_name:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - address
    - age
    - email
    - full_name
    - password
    - username
    type: object
host: localhost:8080
info:
  contact: {}
  description: RESTful API for Hacktivagram using Golang Echo Framework
  title: Hacktivagram API Docs
  version: "1.0"
paths:
  /posts:
    get:
      description: Retrieve all posts from all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all posts
      tags:
      - Posts
    post:
      consumes:
      - application/json
      description: Create a new post by the logged-in user. If content is empty, a
        joke will be auto-filled.
      parameters:
      - description: Create Post Payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - Posts
  /posts/{id}:
    delete:
      description: Delete a post by ID, only if the user is the owner
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a post
      tags:
      - Posts
    get:
      description: Retrieve a post with its comments and commenter info by post ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PostDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get post by ID
      tags:
      - Posts
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User Login Payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Login user
      tags:
      - Users
  /users/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User Register Payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register a new user
      tags:
      - Users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
